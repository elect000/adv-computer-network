#+TITLE: コンピュータネットワーク特論 レポート課題 #1
#+AUTHOR: コンピュータサイエンス専攻 江畑 拓哉(201920631)
# This is a Bibtex reference
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:t arch:headline ^:nil
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:nil e:nil email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:nil title:t toc:nil todo:t |:t
#+LANGUAGE: ja
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.2.3)
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper, dvipdfmx, 10pt]
#+LATEX_HEADER: \usepackage{amsmath, amssymb, bm}
#+LATEX_HEADER: \usepackage{graphics}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{longtable}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{pxjahyper}
#+LATEX_HEADER: \hypersetup{colorlinks=false, pdfborder={0 0 0}}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[backend=biber, bibencoding=utf8, style=authoryear]{biblatex}
#+LATEX_HEADER: \usepackage[top=20truemm, bottom=25truemm, left=10truemm, right=25truemm]{geometry}
#+LATEX_HEADER: \usepackage{ascmac}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algorithmic}
#+LATEX_HEADER: \addbibresource{reference.bib}
#+DESCRIPTION:
#+KEYWORDS:
#+STARTUP: indent overview inlineimages
* SLIDING WINDOW PROTOCOLSの節で学んだすべてのことを、A4用紙１ページ以内でまとめなさい。
  SLIDING WINDOW PROTOCOLは通信の制御法の一種である。フレームを送信した際に、そのフレームが正しく相手に届いているかを確認するために、相手がフレームを受け取り送信主にデータを送る際に、受け取ったこと/受け取れなかったこと（再送要求）をフレームに乗せることがある。この際に、どのフレームが正しく通信できた/できていないかを見つけるために、ウィンドウと順序番号という概念をこのプロトコルは導入している。注意しなければならないこととして、この仕組みはA→Bな一方向通信につき1つ必要になっている。双方向通信を行うには2つ用意しなければならない。
  順序番号は例えば３bitの値を取り、順序番号の最大値の次は最小値に繋がる、つまり循環するような仕組みになっている。
  標準的なウィンドウ制御の例を簡単に紹介すると、次のようになる。
  1. 送信者は送信フレームに順序番号（最小値から順につける）をつけて送信する。
  2. 受信者は送信フレームを受け取ると、順序番号に対応した応答(ACK)フレームを作成して返信する。
  3. 送信者は
     - 対応した応答フレームを設定した受付時間内に受け取れればそのまま通信を続けていく。
     - 時間内に受け取れなければ再送処理を行う。
  この手法の利点は、ウィンドウサイズ分だけ送信フレームの応答を受け取る前にフレームを送信してもフレームの損失を特定できることにある。1フレームを送信してそのフレームが正しく送れたかを確認して次を送信する、というようなものに比べて、ウィンドウサイズ分だけまとめてフレームを送信できるので効率が良くなる。
  この手法の問題点としては、まず十分なウィンドウサイズがないときに応答フレームの受付時間が短くなってしまうということである。例えばウィンドウサイズが 1 のとき、1フレーム送ったら、次のフレーム送信までに応答フレームが受け取れないと再送してしまうことになる。
  ウィンドウサイズを決めるために考えられる指標とし帯域遅延積というものがある。これは通信帯域とラウンドトリップ時間の積で表され、ネットワークを最大に使って通信を行ったときそれだけの量が応答を受け取れない状態になってしまうということを意味している。
  帯域遅延積が大きいと、誤りが発生したときそれだけ再送しなければならないフレームの検知が遅れる。一般にフレームが正しく受け取れなかった場合にはその誤ったフレームからフレーム送信を再開する。特に go-back-n という手法では受け取ったフレームに誤りがあればそのフレーム以降の応答を送らず、正しいフレームが再送されるのを待つ。
  受付時間を管理する手法としては送信順に Queue にタイムアウトになる時間を詰めていく手法がある。こうすることで i 番目のフレームのタイムアウトが計測し終わったあとに i + 1 番目のフレームの情報を取り出して次のタイムアウトを計測し始めることができる。
  また今までの応用として、誤りが起きたフレームのみを再送する仕組みSelective Repeatが存在する。その際には誤ったフレームの次のフレームの応答を正常な応答ACKではなく、NAK(Negative ACK)というものに変える。するとその前の誤ったフレームを送信する。この問題としては誤ったフレームの次のフレームから、再送されたフレームまでのフレームをバッファに貯めておく必要があることで、これには多くのメモリを要する。また Selective Repeatを用いた場合、順序番号とウィンドウサイズの関係は、順序番号/2 = ウィンドウサイズ、に制限され、対応するACKを受け取った後ウインドウをずらす処理を行うわなければならない。なぜなら、ウィンドウが一周した次に流れるフレームが、一周前の再送のフレームなのか一周した次のフレームなのかがわからなくなってしまうためである。
